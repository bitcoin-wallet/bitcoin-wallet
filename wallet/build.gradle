apply plugin: 'com.android.application'

android {
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src']
                resources.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }

    defaultConfig {
        applicationId "de.schildbach.wallet_test"
        minSdkVersion 15
        targetSdkVersion 16
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }
    }
}

repositories {
    // For local SNAPSHOT dependencies
    mavenLocal()
}

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.android.support:support-v13:19.1.0'
    compile 'com.google:bitcoinj:0.12-SNAPSHOT'
    compile 'de.schildbach.wallet:integration-android:2.0'
    compile 'com.google.protobuf:protobuf-java:2.5.0'
    compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.zxing:core:3.1.0'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'com.github.tony19:logback-android-classic:1.1.1-1'
    compile 'com.github.tony19:logback-android-core:1.1.1-1'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'batik:batik-awt-util:1.6-1'
        classpath 'batik:batik-dom:1.6-1'
        classpath 'batik:batik-rasterizer-ext:1.6-1'
    }
}

import org.apache.batik.apps.rasterizer.DestinationType;
import org.apache.batik.apps.rasterizer.SVGConverterController
import org.apache.batik.apps.rasterizer.SVGConverterSource
import org.apache.batik.apps.rasterizer.SVGConverter
import org.apache.batik.transcoder.Transcoder
import org.gradle.api.logging.Logger

public class Rasterize
        implements SVGConverterController
{
    Logger logger

    Rasterize(Logger logger) {
        this.logger = logger
    }

    @Override
    boolean proceedWithComputedTask(Transcoder transcoder, Map map, Vector vector, Vector vector2) {
        return true
    }

    @Override
    boolean proceedWithSourceTranscoding(SVGConverterSource svgConverterSource, File file) {
        return true
    }

    @Override
    boolean proceedOnSourceTranscodingFailure(SVGConverterSource source, File file, String error) {
        logger.error("failed to transcode " + source.getName() + " " + error)
        return false
    }

    @Override
    void onSourceTranscodingSuccess(SVGConverterSource source, File file) {
        logger.info("transcoded " + source.getName())
    }

    void execute(String src, String prefix) {
        convert(src, "$prefix/res/drawable-hdpi", 72, 72)
        convert(src, "$prefix/res/drawable-xhdpi", 96, 96)
        convert(src, "$prefix/res/drawable-xxhdpi", 144, 144)
    }

    private void convert(String src, String destDir, int width, int height) {
        String[] srcs = [new File(src).absolutePath]
        SVGConverter converter = new SVGConverter(this)
        converter.setSources(srcs)
        converter.setDst(new File(destDir))
        converter.setDestinationType(DestinationType.PNG)
        converter.setWidth(width)
        converter.setHeight(height)
        converter.execute()
    }
}

task appicon << {
    def Rasterize rasterizer = new Rasterize(logger)
    rasterizer.execute("$projectDir/graphics/app_icon.svg", "$projectDir")
}

project.tasks.getByName("preBuild").dependsOn "appicon"
