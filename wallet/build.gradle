// Set this if you want to use a stripped scrypt jar that works across any android CPU.
// See https://github.com/devrandom/scrypt/
boolean useStrippedScrypt = true

// For local SNAPSHOT dependencies
boolean useLocalRepository = true

apply plugin: 'android'

android {
    lintOptions {
          abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    signingConfigs {
        debug
        prod
    }
    compileSdkVersion 20
    buildToolsVersion "20.0.0"
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        prod {
            res.srcDirs = ['build_types/prod/res']
        }

        instrumentTest.setRoot('tests')
    }
    defaultConfig {
        applicationId "de.schildbach"
        minSdkVersion 15
        targetSdkVersion 16
        versionCode 5
        versionName "0.8.1"
    }
    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            signingConfig signingConfigs.debug
            versionNameSuffix '-test'
            applicationIdSuffix '.wallet_test'
        }
        prod {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            signingConfig signingConfigs.prod
            applicationIdSuffix '.wallet'
        }
    }
    dexOptions {
        incremental true
    }
}

repositories {
    if (useLocalRepository) {
        mavenLocal()
    }
}

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.android.support:support-v13:19.1.0'
    compile 'org.bitcoinj:bitcoinj-core:0.12.2'
    if (useStrippedScrypt) {
        compile 'com.lambdaworks:scrypt:1.4.1-STRIP'
    }
    compile 'de.schildbach.wallet:integration-android:2.0'
    compile 'com.google.protobuf:protobuf-java:2.5.0'
    compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.zxing:core:3.1.0'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'com.github.tony19:logback-android-classic:1.1.1-3'
    compile 'com.github.tony19:logback-android-core:1.1.1-3'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
}

def loadSigningProperties() {
    def props = new Properties()
    def file = rootProject.file("debug.properties")
    if (file.exists()) {
        logger.info("signing properties found")
        props.load(new FileInputStream(file))
        android.signingConfigs.debug.storeFile rootProject.file(props.keyStore)
        android.signingConfigs.debug.storePassword props.keyStorePassword
        android.signingConfigs.debug.keyAlias props.keyAlias
        android.signingConfigs.debug.keyPassword props.keyAliasPassword
    } else {
        logger.info("no signing properties")
    }
}

loadSigningProperties()

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'batik:batik-awt-util:1.6-1'
        classpath 'batik:batik-dom:1.6-1'
        classpath 'batik:batik-rasterizer-ext:1.6-1'
    }
}


import org.apache.batik.apps.rasterizer.DestinationType
import org.apache.batik.apps.rasterizer.SVGConverter
import org.apache.batik.apps.rasterizer.SVGConverterController
import org.apache.batik.apps.rasterizer.SVGConverterSource
import org.apache.batik.transcoder.Transcoder

public class Rasterize
        implements SVGConverterController
{
    Logger logger

    Rasterize(Logger logger) {
        this.logger = logger
    }

    @Override
    boolean proceedWithComputedTask(Transcoder transcoder, Map map, Vector vector, Vector vector2) {
        return true
    }

    @Override
    boolean proceedWithSourceTranscoding(SVGConverterSource svgConverterSource, File file) {
        return true
    }

    @Override
    boolean proceedOnSourceTranscodingFailure(SVGConverterSource source, File file, String error) {
        logger.error("failed to transcode " + source.getName() + " " + error)
        return false
    }

    @Override
    void onSourceTranscodingSuccess(SVGConverterSource source, File file) {
        logger.info("transcoded " + source.getName())
    }

    void execute(String src, String prefix) {
        convert(src, "$prefix/res/drawable-hdpi", 72, 72)
        convert(src, "$prefix/res/drawable-xhdpi", 96, 96)
        convert(src, "$prefix/res/drawable-xxhdpi", 144, 144)
    }

    private void convert(String src, String destDir, int width, int height) {
        String[] srcs = [new File(src).absolutePath]
        SVGConverter converter = new SVGConverter(this)
        converter.setSources(srcs)
        converter.setDst(new File(destDir))
        converter.setDestinationType(DestinationType.PNG)
        converter.setWidth(width)
        converter.setHeight(height)
        converter.execute()
    }
}

task appicon << {
    def Rasterize rasterizer = new Rasterize(logger)
    rasterizer.execute("$projectDir/graphics/app_icon.svg", "$projectDir")
}

project.tasks.getByName("preBuild").dependsOn "appicon"
